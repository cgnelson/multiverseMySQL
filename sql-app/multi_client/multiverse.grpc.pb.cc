// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: multiverse.proto

#include "multiverse.pb.h"
#include "multiverse.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* MultiverseManager_method_names[] = {
  "/MultiverseManager/DoLogin",
  "/MultiverseManager/MakeQuery",
  "/MultiverseManager/DisconnectUser",
};

std::unique_ptr< MultiverseManager::Stub> MultiverseManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MultiverseManager::Stub> stub(new MultiverseManager::Stub(channel));
  return stub;
}

MultiverseManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DoLogin_(MultiverseManager_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MakeQuery_(MultiverseManager_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisconnectUser_(MultiverseManager_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MultiverseManager::Stub::DoLogin(::grpc::ClientContext* context, const ::LoginReq& request, ::LoginResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoLogin_, context, request, response);
}

void MultiverseManager::Stub::experimental_async::DoLogin(::grpc::ClientContext* context, const ::LoginReq* request, ::LoginResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoLogin_, context, request, response, std::move(f));
}

void MultiverseManager::Stub::experimental_async::DoLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LoginResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoLogin_, context, request, response, std::move(f));
}

void MultiverseManager::Stub::experimental_async::DoLogin(::grpc::ClientContext* context, const ::LoginReq* request, ::LoginResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoLogin_, context, request, response, reactor);
}

void MultiverseManager::Stub::experimental_async::DoLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LoginResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LoginResp>* MultiverseManager::Stub::AsyncDoLoginRaw(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LoginResp>::Create(channel_.get(), cq, rpcmethod_DoLogin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::LoginResp>* MultiverseManager::Stub::PrepareAsyncDoLoginRaw(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::LoginResp>::Create(channel_.get(), cq, rpcmethod_DoLogin_, context, request, false);
}

::grpc::Status MultiverseManager::Stub::MakeQuery(::grpc::ClientContext* context, const ::QueryReq& request, ::QueryResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MakeQuery_, context, request, response);
}

void MultiverseManager::Stub::experimental_async::MakeQuery(::grpc::ClientContext* context, const ::QueryReq* request, ::QueryResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MakeQuery_, context, request, response, std::move(f));
}

void MultiverseManager::Stub::experimental_async::MakeQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::QueryResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MakeQuery_, context, request, response, std::move(f));
}

void MultiverseManager::Stub::experimental_async::MakeQuery(::grpc::ClientContext* context, const ::QueryReq* request, ::QueryResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MakeQuery_, context, request, response, reactor);
}

void MultiverseManager::Stub::experimental_async::MakeQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::QueryResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MakeQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::QueryResp>* MultiverseManager::Stub::AsyncMakeQueryRaw(::grpc::ClientContext* context, const ::QueryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::QueryResp>::Create(channel_.get(), cq, rpcmethod_MakeQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::QueryResp>* MultiverseManager::Stub::PrepareAsyncMakeQueryRaw(::grpc::ClientContext* context, const ::QueryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::QueryResp>::Create(channel_.get(), cq, rpcmethod_MakeQuery_, context, request, false);
}

::grpc::Status MultiverseManager::Stub::DisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq& request, ::DisconnectResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DisconnectUser_, context, request, response);
}

void MultiverseManager::Stub::experimental_async::DisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq* request, ::DisconnectResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DisconnectUser_, context, request, response, std::move(f));
}

void MultiverseManager::Stub::experimental_async::DisconnectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DisconnectResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DisconnectUser_, context, request, response, std::move(f));
}

void MultiverseManager::Stub::experimental_async::DisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq* request, ::DisconnectResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DisconnectUser_, context, request, response, reactor);
}

void MultiverseManager::Stub::experimental_async::DisconnectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DisconnectResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DisconnectUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DisconnectResp>* MultiverseManager::Stub::AsyncDisconnectUserRaw(::grpc::ClientContext* context, const ::DisconnectReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DisconnectResp>::Create(channel_.get(), cq, rpcmethod_DisconnectUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DisconnectResp>* MultiverseManager::Stub::PrepareAsyncDisconnectUserRaw(::grpc::ClientContext* context, const ::DisconnectReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::DisconnectResp>::Create(channel_.get(), cq, rpcmethod_DisconnectUser_, context, request, false);
}

MultiverseManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiverseManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiverseManager::Service, ::LoginReq, ::LoginResp>(
          std::mem_fn(&MultiverseManager::Service::DoLogin), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiverseManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiverseManager::Service, ::QueryReq, ::QueryResp>(
          std::mem_fn(&MultiverseManager::Service::MakeQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiverseManager_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiverseManager::Service, ::DisconnectReq, ::DisconnectResp>(
          std::mem_fn(&MultiverseManager::Service::DisconnectUser), this)));
}

MultiverseManager::Service::~Service() {
}

::grpc::Status MultiverseManager::Service::DoLogin(::grpc::ServerContext* context, const ::LoginReq* request, ::LoginResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiverseManager::Service::MakeQuery(::grpc::ServerContext* context, const ::QueryReq* request, ::QueryResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiverseManager::Service::DisconnectUser(::grpc::ServerContext* context, const ::DisconnectReq* request, ::DisconnectResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


