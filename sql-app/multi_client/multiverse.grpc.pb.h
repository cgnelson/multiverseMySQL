// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: multiverse.proto
#ifndef GRPC_multiverse_2eproto__INCLUDED
#define GRPC_multiverse_2eproto__INCLUDED

#include "multiverse.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

class MultiverseManager final {
 public:
  static constexpr char const* service_full_name() {
    return "MultiverseManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DoLogin(::grpc::ClientContext* context, const ::LoginReq& request, ::LoginResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoginResp>> AsyncDoLogin(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoginResp>>(AsyncDoLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoginResp>> PrepareAsyncDoLogin(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoginResp>>(PrepareAsyncDoLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status MakeQuery(::grpc::ClientContext* context, const ::QueryReq& request, ::QueryResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::QueryResp>> AsyncMakeQuery(::grpc::ClientContext* context, const ::QueryReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::QueryResp>>(AsyncMakeQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::QueryResp>> PrepareAsyncMakeQuery(::grpc::ClientContext* context, const ::QueryReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::QueryResp>>(PrepareAsyncMakeQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status DisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq& request, ::DisconnectResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DisconnectResp>> AsyncDisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DisconnectResp>>(AsyncDisconnectUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DisconnectResp>> PrepareAsyncDisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DisconnectResp>>(PrepareAsyncDisconnectUserRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void DoLogin(::grpc::ClientContext* context, const ::LoginReq* request, ::LoginResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DoLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LoginResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DoLogin(::grpc::ClientContext* context, const ::LoginReq* request, ::LoginResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DoLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LoginResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void MakeQuery(::grpc::ClientContext* context, const ::QueryReq* request, ::QueryResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MakeQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::QueryResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MakeQuery(::grpc::ClientContext* context, const ::QueryReq* request, ::QueryResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void MakeQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::QueryResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq* request, ::DisconnectResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DisconnectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DisconnectResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq* request, ::DisconnectResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DisconnectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DisconnectResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LoginResp>* AsyncDoLoginRaw(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LoginResp>* PrepareAsyncDoLoginRaw(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::QueryResp>* AsyncMakeQueryRaw(::grpc::ClientContext* context, const ::QueryReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::QueryResp>* PrepareAsyncMakeQueryRaw(::grpc::ClientContext* context, const ::QueryReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DisconnectResp>* AsyncDisconnectUserRaw(::grpc::ClientContext* context, const ::DisconnectReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DisconnectResp>* PrepareAsyncDisconnectUserRaw(::grpc::ClientContext* context, const ::DisconnectReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DoLogin(::grpc::ClientContext* context, const ::LoginReq& request, ::LoginResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoginResp>> AsyncDoLogin(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoginResp>>(AsyncDoLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoginResp>> PrepareAsyncDoLogin(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoginResp>>(PrepareAsyncDoLoginRaw(context, request, cq));
    }
    ::grpc::Status MakeQuery(::grpc::ClientContext* context, const ::QueryReq& request, ::QueryResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::QueryResp>> AsyncMakeQuery(::grpc::ClientContext* context, const ::QueryReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::QueryResp>>(AsyncMakeQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::QueryResp>> PrepareAsyncMakeQuery(::grpc::ClientContext* context, const ::QueryReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::QueryResp>>(PrepareAsyncMakeQueryRaw(context, request, cq));
    }
    ::grpc::Status DisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq& request, ::DisconnectResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DisconnectResp>> AsyncDisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DisconnectResp>>(AsyncDisconnectUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DisconnectResp>> PrepareAsyncDisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DisconnectResp>>(PrepareAsyncDisconnectUserRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void DoLogin(::grpc::ClientContext* context, const ::LoginReq* request, ::LoginResp* response, std::function<void(::grpc::Status)>) override;
      void DoLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LoginResp* response, std::function<void(::grpc::Status)>) override;
      void DoLogin(::grpc::ClientContext* context, const ::LoginReq* request, ::LoginResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DoLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::LoginResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void MakeQuery(::grpc::ClientContext* context, const ::QueryReq* request, ::QueryResp* response, std::function<void(::grpc::Status)>) override;
      void MakeQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::QueryResp* response, std::function<void(::grpc::Status)>) override;
      void MakeQuery(::grpc::ClientContext* context, const ::QueryReq* request, ::QueryResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void MakeQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::QueryResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq* request, ::DisconnectResp* response, std::function<void(::grpc::Status)>) override;
      void DisconnectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DisconnectResp* response, std::function<void(::grpc::Status)>) override;
      void DisconnectUser(::grpc::ClientContext* context, const ::DisconnectReq* request, ::DisconnectResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DisconnectUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::DisconnectResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::LoginResp>* AsyncDoLoginRaw(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LoginResp>* PrepareAsyncDoLoginRaw(::grpc::ClientContext* context, const ::LoginReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::QueryResp>* AsyncMakeQueryRaw(::grpc::ClientContext* context, const ::QueryReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::QueryResp>* PrepareAsyncMakeQueryRaw(::grpc::ClientContext* context, const ::QueryReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DisconnectResp>* AsyncDisconnectUserRaw(::grpc::ClientContext* context, const ::DisconnectReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DisconnectResp>* PrepareAsyncDisconnectUserRaw(::grpc::ClientContext* context, const ::DisconnectReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DoLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_MakeQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_DisconnectUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DoLogin(::grpc::ServerContext* context, const ::LoginReq* request, ::LoginResp* response);
    virtual ::grpc::Status MakeQuery(::grpc::ServerContext* context, const ::QueryReq* request, ::QueryResp* response);
    virtual ::grpc::Status DisconnectUser(::grpc::ServerContext* context, const ::DisconnectReq* request, ::DisconnectResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DoLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoLogin() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DoLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoLogin(::grpc::ServerContext* /*context*/, const ::LoginReq* /*request*/, ::LoginResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoLogin(::grpc::ServerContext* context, ::LoginReq* request, ::grpc::ServerAsyncResponseWriter< ::LoginResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MakeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MakeQuery() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MakeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeQuery(::grpc::ServerContext* /*context*/, const ::QueryReq* /*request*/, ::QueryResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeQuery(::grpc::ServerContext* context, ::QueryReq* request, ::grpc::ServerAsyncResponseWriter< ::QueryResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DisconnectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DisconnectUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DisconnectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisconnectUser(::grpc::ServerContext* /*context*/, const ::DisconnectReq* /*request*/, ::DisconnectResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisconnectUser(::grpc::ServerContext* context, ::DisconnectReq* request, ::grpc::ServerAsyncResponseWriter< ::DisconnectResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DoLogin<WithAsyncMethod_MakeQuery<WithAsyncMethod_DisconnectUser<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoLogin() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::LoginReq, ::LoginResp>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::LoginReq* request, ::LoginResp* response) { return this->DoLogin(context, request, response); }));}
    void SetMessageAllocatorFor_DoLogin(
        ::grpc::experimental::MessageAllocator< ::LoginReq, ::LoginResp>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::LoginReq, ::LoginResp>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoLogin(::grpc::ServerContext* /*context*/, const ::LoginReq* /*request*/, ::LoginResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* DoLogin(::grpc::experimental::CallbackServerContext* /*context*/, const ::LoginReq* /*request*/, ::LoginResp* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MakeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MakeQuery() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::QueryReq, ::QueryResp>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::QueryReq* request, ::QueryResp* response) { return this->MakeQuery(context, request, response); }));}
    void SetMessageAllocatorFor_MakeQuery(
        ::grpc::experimental::MessageAllocator< ::QueryReq, ::QueryResp>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::QueryReq, ::QueryResp>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MakeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeQuery(::grpc::ServerContext* /*context*/, const ::QueryReq* /*request*/, ::QueryResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* MakeQuery(::grpc::experimental::CallbackServerContext* /*context*/, const ::QueryReq* /*request*/, ::QueryResp* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DisconnectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DisconnectUser() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::DisconnectReq, ::DisconnectResp>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::DisconnectReq* request, ::DisconnectResp* response) { return this->DisconnectUser(context, request, response); }));}
    void SetMessageAllocatorFor_DisconnectUser(
        ::grpc::experimental::MessageAllocator< ::DisconnectReq, ::DisconnectResp>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::DisconnectReq, ::DisconnectResp>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DisconnectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisconnectUser(::grpc::ServerContext* /*context*/, const ::DisconnectReq* /*request*/, ::DisconnectResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* DisconnectUser(::grpc::experimental::CallbackServerContext* /*context*/, const ::DisconnectReq* /*request*/, ::DisconnectResp* /*response*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_DoLogin<ExperimentalWithCallbackMethod_MakeQuery<ExperimentalWithCallbackMethod_DisconnectUser<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DoLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoLogin() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DoLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoLogin(::grpc::ServerContext* /*context*/, const ::LoginReq* /*request*/, ::LoginResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MakeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MakeQuery() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MakeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeQuery(::grpc::ServerContext* /*context*/, const ::QueryReq* /*request*/, ::QueryResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DisconnectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DisconnectUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DisconnectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisconnectUser(::grpc::ServerContext* /*context*/, const ::DisconnectReq* /*request*/, ::DisconnectResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoLogin() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DoLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoLogin(::grpc::ServerContext* /*context*/, const ::LoginReq* /*request*/, ::LoginResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MakeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MakeQuery() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_MakeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeQuery(::grpc::ServerContext* /*context*/, const ::QueryReq* /*request*/, ::QueryResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DisconnectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DisconnectUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DisconnectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisconnectUser(::grpc::ServerContext* /*context*/, const ::DisconnectReq* /*request*/, ::DisconnectResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisconnectUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoLogin() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoLogin(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoLogin(::grpc::ServerContext* /*context*/, const ::LoginReq* /*request*/, ::LoginResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* DoLogin(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MakeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MakeQuery() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MakeQuery(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MakeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeQuery(::grpc::ServerContext* /*context*/, const ::QueryReq* /*request*/, ::QueryResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* MakeQuery(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DisconnectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DisconnectUser() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DisconnectUser(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DisconnectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DisconnectUser(::grpc::ServerContext* /*context*/, const ::DisconnectReq* /*request*/, ::DisconnectResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* DisconnectUser(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoLogin() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::LoginReq, ::LoginResp>(std::bind(&WithStreamedUnaryMethod_DoLogin<BaseClass>::StreamedDoLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DoLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoLogin(::grpc::ServerContext* /*context*/, const ::LoginReq* /*request*/, ::LoginResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LoginReq,::LoginResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MakeQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MakeQuery() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::QueryReq, ::QueryResp>(std::bind(&WithStreamedUnaryMethod_MakeQuery<BaseClass>::StreamedMakeQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MakeQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MakeQuery(::grpc::ServerContext* /*context*/, const ::QueryReq* /*request*/, ::QueryResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMakeQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::QueryReq,::QueryResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DisconnectUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DisconnectUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::DisconnectReq, ::DisconnectResp>(std::bind(&WithStreamedUnaryMethod_DisconnectUser<BaseClass>::StreamedDisconnectUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DisconnectUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DisconnectUser(::grpc::ServerContext* /*context*/, const ::DisconnectReq* /*request*/, ::DisconnectResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisconnectUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DisconnectReq,::DisconnectResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DoLogin<WithStreamedUnaryMethod_MakeQuery<WithStreamedUnaryMethod_DisconnectUser<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DoLogin<WithStreamedUnaryMethod_MakeQuery<WithStreamedUnaryMethod_DisconnectUser<Service > > > StreamedService;
};


#endif  // GRPC_multiverse_2eproto__INCLUDED
